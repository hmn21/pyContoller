#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MsgType:
  INFO = 0
  ERROR = 1
  WARNING = 2
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    0: "INFO",
    1: "ERROR",
    2: "WARNING",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "INFO": 0,
    "ERROR": 1,
    "WARNING": 2,
    "UNKNOWN": 99999,
  }

class StratStatus:
  Run = 1
  Stop = 2
  Pause = 3
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    1: "Run",
    2: "Stop",
    3: "Pause",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "Run": 1,
    "Stop": 2,
    "Pause": 3,
    "UNKNOWN": 99999,
  }

class Direction:
  Buy = 0
  Sell = 1
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    0: "Buy",
    1: "Sell",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "Buy": 0,
    "Sell": 1,
    "UNKNOWN": 99999,
  }

class OrderType:
  Limit = 0
  Market = 1
  FAK = 2
  FOK = 3
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    0: "Limit",
    1: "Market",
    2: "FAK",
    3: "FOK",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "Limit": 0,
    "Market": 1,
    "FAK": 2,
    "FOK": 3,
    "UNKNOWN": 99999,
  }

class Offset:
  Open = 0
  Close = 1
  CloseYd = 2
  CloseTd = 3
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    0: "Open",
    1: "Close",
    2: "CloseYd",
    3: "CloseTd",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "Open": 0,
    "Close": 1,
    "CloseYd": 2,
    "CloseTd": 3,
    "UNKNOWN": 99999,
  }

class OrderStatus:
  AllTraded = 0
  PartTradedQueueing = 1
  PartTradedNotQueueing = 2
  NoTradeQueueing = 3
  NoTradeNotQueueing = 4
  Canceled = 5
  AcceptedNoReply = 6
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    0: "AllTraded",
    1: "PartTradedQueueing",
    2: "PartTradedNotQueueing",
    3: "NoTradeQueueing",
    4: "NoTradeNotQueueing",
    5: "Canceled",
    6: "AcceptedNoReply",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "AllTraded": 0,
    "PartTradedQueueing": 1,
    "PartTradedNotQueueing": 2,
    "NoTradeQueueing": 3,
    "NoTradeNotQueueing": 4,
    "Canceled": 5,
    "AcceptedNoReply": 6,
    "UNKNOWN": 99999,
  }

class HedgeType:
  Arbitrage = 1
  Speculation = 2
  Hedge = 3
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    1: "Arbitrage",
    2: "Speculation",
    3: "Hedge",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "Arbitrage": 1,
    "Speculation": 2,
    "Hedge": 3,
    "UNKNOWN": 99999,
  }

class InstrumentType:
  IndexFutures = 1
  CommodityFutures = 2
  Cash = 3
  Stock = 4
  ETF = 5
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    1: "IndexFutures",
    2: "CommodityFutures",
    3: "Cash",
    4: "Stock",
    5: "ETF",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "IndexFutures": 1,
    "CommodityFutures": 2,
    "Cash": 3,
    "Stock": 4,
    "ETF": 5,
    "UNKNOWN": 99999,
  }

class ValType:
  String = 1
  Bool = 2
  Int = 3
  Double = 4
  UNKNOWN = 99999

  _VALUES_TO_NAMES = {
    1: "String",
    2: "Bool",
    3: "Int",
    4: "Double",
    99999: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "String": 1,
    "Bool": 2,
    "Int": 3,
    "Double": 4,
    "UNKNOWN": 99999,
  }


class RtnOrder:
  """
  Attributes:
   - stratID
   - clientOrderID
   - instrumentID
   - exchangeID
   - hedge
   - offset
   - dire
   - orderPrice
   - size
   - type
   - status
   - tradedVol
   - systemOrderID
   - insertTime
   - updateTime
   - volOriginal
   - errorID
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stratID', None, "", ), # 1
    (2, TType.STRING, 'clientOrderID', None, "", ), # 2
    (3, TType.STRING, 'instrumentID', None, "", ), # 3
    (4, TType.STRING, 'exchangeID', None, "", ), # 4
    (5, TType.I32, 'hedge', None,     99999, ), # 5
    (6, TType.I32, 'offset', None,     99999, ), # 6
    (7, TType.I32, 'dire', None,     99999, ), # 7
    (8, TType.DOUBLE, 'orderPrice', None, -1, ), # 8
    (9, TType.I32, 'size', None, -1, ), # 9
    (10, TType.I32, 'type', None,     99999, ), # 10
    (11, TType.I32, 'status', None,     99999, ), # 11
    (12, TType.I32, 'tradedVol', None, -1, ), # 12
    (13, TType.STRING, 'systemOrderID', None, "", ), # 13
    (14, TType.STRING, 'insertTime', None, "", ), # 14
    None, # 15
    None, # 16
    (17, TType.STRING, 'updateTime', None, "", ), # 17
    (18, TType.I32, 'volOriginal', None, -1, ), # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
    (51, TType.STRING, 'errorMsg', None, "", ), # 51
  )

  def __init__(self, stratID=thrift_spec[1][4], clientOrderID=thrift_spec[2][4], instrumentID=thrift_spec[3][4], exchangeID=thrift_spec[4][4], hedge=thrift_spec[5][4], offset=thrift_spec[6][4], dire=thrift_spec[7][4], orderPrice=thrift_spec[8][4], size=thrift_spec[9][4], type=thrift_spec[10][4], status=thrift_spec[11][4], tradedVol=thrift_spec[12][4], systemOrderID=thrift_spec[13][4], insertTime=thrift_spec[14][4], updateTime=thrift_spec[17][4], volOriginal=thrift_spec[18][4], errorID=thrift_spec[50][4], errorMsg=thrift_spec[51][4],):
    self.stratID = stratID
    self.clientOrderID = clientOrderID
    self.instrumentID = instrumentID
    self.exchangeID = exchangeID
    self.hedge = hedge
    self.offset = offset
    self.dire = dire
    self.orderPrice = orderPrice
    self.size = size
    self.type = type
    self.status = status
    self.tradedVol = tradedVol
    self.systemOrderID = systemOrderID
    self.insertTime = insertTime
    self.updateTime = updateTime
    self.volOriginal = volOriginal
    self.errorID = errorID
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.exchangeID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hedge = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.dire = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.orderPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.tradedVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.systemOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.insertTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.updateTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.volOriginal = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RtnOrder')
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 1)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.clientOrderID is not None:
      oprot.writeFieldBegin('clientOrderID', TType.STRING, 2)
      oprot.writeString(self.clientOrderID)
      oprot.writeFieldEnd()
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 3)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.exchangeID is not None:
      oprot.writeFieldBegin('exchangeID', TType.STRING, 4)
      oprot.writeString(self.exchangeID)
      oprot.writeFieldEnd()
    if self.hedge is not None:
      oprot.writeFieldBegin('hedge', TType.I32, 5)
      oprot.writeI32(self.hedge)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 6)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.dire is not None:
      oprot.writeFieldBegin('dire', TType.I32, 7)
      oprot.writeI32(self.dire)
      oprot.writeFieldEnd()
    if self.orderPrice is not None:
      oprot.writeFieldBegin('orderPrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.orderPrice)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 9)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 10)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 11)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.tradedVol is not None:
      oprot.writeFieldBegin('tradedVol', TType.I32, 12)
      oprot.writeI32(self.tradedVol)
      oprot.writeFieldEnd()
    if self.systemOrderID is not None:
      oprot.writeFieldBegin('systemOrderID', TType.STRING, 13)
      oprot.writeString(self.systemOrderID)
      oprot.writeFieldEnd()
    if self.insertTime is not None:
      oprot.writeFieldBegin('insertTime', TType.STRING, 14)
      oprot.writeString(self.insertTime)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.STRING, 17)
      oprot.writeString(self.updateTime)
      oprot.writeFieldEnd()
    if self.volOriginal is not None:
      oprot.writeFieldBegin('volOriginal', TType.I32, 18)
      oprot.writeI32(self.volOriginal)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 51)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.clientOrderID is None:
      raise TProtocol.TProtocolException(message='Required field clientOrderID is unset!')
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.exchangeID is None:
      raise TProtocol.TProtocolException(message='Required field exchangeID is unset!')
    if self.hedge is None:
      raise TProtocol.TProtocolException(message='Required field hedge is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.dire is None:
      raise TProtocol.TProtocolException(message='Required field dire is unset!')
    if self.orderPrice is None:
      raise TProtocol.TProtocolException(message='Required field orderPrice is unset!')
    if self.size is None:
      raise TProtocol.TProtocolException(message='Required field size is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.tradedVol is None:
      raise TProtocol.TProtocolException(message='Required field tradedVol is unset!')
    if self.systemOrderID is None:
      raise TProtocol.TProtocolException(message='Required field systemOrderID is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.clientOrderID)
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.exchangeID)
    value = (value * 31) ^ hash(self.hedge)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.dire)
    value = (value * 31) ^ hash(self.orderPrice)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.tradedVol)
    value = (value * 31) ^ hash(self.systemOrderID)
    value = (value * 31) ^ hash(self.insertTime)
    value = (value * 31) ^ hash(self.updateTime)
    value = (value * 31) ^ hash(self.volOriginal)
    value = (value * 31) ^ hash(self.errorID)
    value = (value * 31) ^ hash(self.errorMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Response:
  """
  Attributes:
   - sendMsg
   - errorID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sendMsg', None, "", ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
  )

  def __init__(self, sendMsg=thrift_spec[1][4], errorID=thrift_spec[50][4],):
    self.sendMsg = sendMsg
    self.errorID = errorID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sendMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Response')
    if self.sendMsg is not None:
      oprot.writeFieldBegin('sendMsg', TType.STRING, 1)
      oprot.writeString(self.sendMsg)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sendMsg)
    value = (value * 31) ^ hash(self.errorID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Request:
  """
  Attributes:
   - result
   - guestName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'result', None, -1, ), # 1
    (2, TType.STRING, 'guestName', None, "", ), # 2
  )

  def __init__(self, result=thrift_spec[1][4], guestName=thrift_spec[2][4],):
    self.result = result
    self.guestName = guestName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.result = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.guestName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Request')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.I32, 1)
      oprot.writeI32(self.result)
      oprot.writeFieldEnd()
    if self.guestName is not None:
      oprot.writeFieldBegin('guestName', TType.STRING, 2)
      oprot.writeString(self.guestName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.guestName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Config:
  """
  Attributes:
   - userName
   - errorID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'userName', None, "", ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
  )

  def __init__(self, userName=thrift_spec[1][4], errorID=thrift_spec[50][4],):
    self.userName = userName
    self.errorID = errorID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Config')
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 1)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.userName is None:
      raise TProtocol.TProtocolException(message='Required field userName is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.userName)
    value = (value * 31) ^ hash(self.errorID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RtnOrders:
  """
  Attributes:
   - orders
   - count
   - errorID
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'orders', (TType.STRUCT,(RtnOrder, RtnOrder.thrift_spec)), None, ), # 1
    (2, TType.I32, 'count', None, -1, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
  )

  def __init__(self, orders=None, count=thrift_spec[2][4], errorID=thrift_spec[50][4],):
    self.orders = orders
    self.count = count
    self.errorID = errorID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.orders = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = RtnOrder()
            _elem5.read(iprot)
            self.orders.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RtnOrders')
    if self.orders is not None:
      oprot.writeFieldBegin('orders', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.orders))
      for iter6 in self.orders:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.orders is None:
      raise TProtocol.TProtocolException(message='Required field orders is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.orders)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.errorID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InputOrder:
  """
  Attributes:
   - stratID
   - clientOrderID
   - instrumentID
   - exchangeID
   - hedge
   - offse
   - dire
   - price
   - size
   - type
   - systemOrderID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stratID', None, "", ), # 1
    (2, TType.STRING, 'clientOrderID', None, "", ), # 2
    (3, TType.STRING, 'instrumentID', None, "", ), # 3
    (4, TType.STRING, 'exchangeID', None, "", ), # 4
    (5, TType.I32, 'hedge', None,     99999, ), # 5
    (6, TType.I32, 'offse', None,     99999, ), # 6
    (7, TType.I32, 'dire', None,     99999, ), # 7
    (8, TType.DOUBLE, 'price', None, -1, ), # 8
    (9, TType.I32, 'size', None, -1, ), # 9
    (10, TType.I32, 'type', None,     99999, ), # 10
    (11, TType.STRING, 'systemOrderID', None, "", ), # 11
  )

  def __init__(self, stratID=thrift_spec[1][4], clientOrderID=thrift_spec[2][4], instrumentID=thrift_spec[3][4], exchangeID=thrift_spec[4][4], hedge=thrift_spec[5][4], offse=thrift_spec[6][4], dire=thrift_spec[7][4], price=thrift_spec[8][4], size=thrift_spec[9][4], type=thrift_spec[10][4], systemOrderID=thrift_spec[11][4],):
    self.stratID = stratID
    self.clientOrderID = clientOrderID
    self.instrumentID = instrumentID
    self.exchangeID = exchangeID
    self.hedge = hedge
    self.offse = offse
    self.dire = dire
    self.price = price
    self.size = size
    self.type = type
    self.systemOrderID = systemOrderID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.exchangeID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hedge = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offse = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.dire = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.size = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.systemOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InputOrder')
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 1)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.clientOrderID is not None:
      oprot.writeFieldBegin('clientOrderID', TType.STRING, 2)
      oprot.writeString(self.clientOrderID)
      oprot.writeFieldEnd()
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 3)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.exchangeID is not None:
      oprot.writeFieldBegin('exchangeID', TType.STRING, 4)
      oprot.writeString(self.exchangeID)
      oprot.writeFieldEnd()
    if self.hedge is not None:
      oprot.writeFieldBegin('hedge', TType.I32, 5)
      oprot.writeI32(self.hedge)
      oprot.writeFieldEnd()
    if self.offse is not None:
      oprot.writeFieldBegin('offse', TType.I32, 6)
      oprot.writeI32(self.offse)
      oprot.writeFieldEnd()
    if self.dire is not None:
      oprot.writeFieldBegin('dire', TType.I32, 7)
      oprot.writeI32(self.dire)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 8)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.size is not None:
      oprot.writeFieldBegin('size', TType.I32, 9)
      oprot.writeI32(self.size)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 10)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.systemOrderID is not None:
      oprot.writeFieldBegin('systemOrderID', TType.STRING, 11)
      oprot.writeString(self.systemOrderID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.clientOrderID is None:
      raise TProtocol.TProtocolException(message='Required field clientOrderID is unset!')
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.exchangeID is None:
      raise TProtocol.TProtocolException(message='Required field exchangeID is unset!')
    if self.hedge is None:
      raise TProtocol.TProtocolException(message='Required field hedge is unset!')
    if self.offse is None:
      raise TProtocol.TProtocolException(message='Required field offse is unset!')
    if self.dire is None:
      raise TProtocol.TProtocolException(message='Required field dire is unset!')
    if self.price is None:
      raise TProtocol.TProtocolException(message='Required field price is unset!')
    if self.size is None:
      raise TProtocol.TProtocolException(message='Required field size is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.clientOrderID)
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.exchangeID)
    value = (value * 31) ^ hash(self.hedge)
    value = (value * 31) ^ hash(self.offse)
    value = (value * 31) ^ hash(self.dire)
    value = (value * 31) ^ hash(self.price)
    value = (value * 31) ^ hash(self.size)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.systemOrderID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderIDCancel:
  """
  Attributes:
   - clientOrderID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'clientOrderID', None, "", ), # 1
  )

  def __init__(self, clientOrderID=thrift_spec[1][4],):
    self.clientOrderID = clientOrderID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.clientOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderIDCancel')
    if self.clientOrderID is not None:
      oprot.writeFieldBegin('clientOrderID', TType.STRING, 1)
      oprot.writeString(self.clientOrderID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clientOrderID is None:
      raise TProtocol.TProtocolException(message='Required field clientOrderID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.clientOrderID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RtnTrade:
  """
  Attributes:
   - stratID
   - clientOrderID
   - instrumentID
   - exchangeID
   - hedge
   - offset
   - dire
   - tradePrice
   - tradeVol
   - tradeTime
   - systemOrderID
   - tradeID
   - errorID
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stratID', None, "", ), # 1
    (2, TType.STRING, 'clientOrderID', None, "", ), # 2
    (3, TType.STRING, 'instrumentID', None, "", ), # 3
    (4, TType.STRING, 'exchangeID', None, "", ), # 4
    (5, TType.I32, 'hedge', None,     99999, ), # 5
    (6, TType.I32, 'offset', None,     99999, ), # 6
    (7, TType.I32, 'dire', None,     99999, ), # 7
    (8, TType.DOUBLE, 'tradePrice', None, -1, ), # 8
    (9, TType.I32, 'tradeVol', None, -1, ), # 9
    (10, TType.STRING, 'tradeTime', None, "", ), # 10
    (11, TType.STRING, 'systemOrderID', None, "", ), # 11
    (12, TType.STRING, 'tradeID', None, "", ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
    (51, TType.STRING, 'errorMsg', None, "", ), # 51
  )

  def __init__(self, stratID=thrift_spec[1][4], clientOrderID=thrift_spec[2][4], instrumentID=thrift_spec[3][4], exchangeID=thrift_spec[4][4], hedge=thrift_spec[5][4], offset=thrift_spec[6][4], dire=thrift_spec[7][4], tradePrice=thrift_spec[8][4], tradeVol=thrift_spec[9][4], tradeTime=thrift_spec[10][4], systemOrderID=thrift_spec[11][4], tradeID=thrift_spec[12][4], errorID=thrift_spec[50][4], errorMsg=thrift_spec[51][4],):
    self.stratID = stratID
    self.clientOrderID = clientOrderID
    self.instrumentID = instrumentID
    self.exchangeID = exchangeID
    self.hedge = hedge
    self.offset = offset
    self.dire = dire
    self.tradePrice = tradePrice
    self.tradeVol = tradeVol
    self.tradeTime = tradeTime
    self.systemOrderID = systemOrderID
    self.tradeID = tradeID
    self.errorID = errorID
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.clientOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.exchangeID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hedge = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.dire = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.tradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.tradeVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.tradeTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.systemOrderID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.tradeID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RtnTrade')
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 1)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.clientOrderID is not None:
      oprot.writeFieldBegin('clientOrderID', TType.STRING, 2)
      oprot.writeString(self.clientOrderID)
      oprot.writeFieldEnd()
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 3)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.exchangeID is not None:
      oprot.writeFieldBegin('exchangeID', TType.STRING, 4)
      oprot.writeString(self.exchangeID)
      oprot.writeFieldEnd()
    if self.hedge is not None:
      oprot.writeFieldBegin('hedge', TType.I32, 5)
      oprot.writeI32(self.hedge)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 6)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.dire is not None:
      oprot.writeFieldBegin('dire', TType.I32, 7)
      oprot.writeI32(self.dire)
      oprot.writeFieldEnd()
    if self.tradePrice is not None:
      oprot.writeFieldBegin('tradePrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.tradePrice)
      oprot.writeFieldEnd()
    if self.tradeVol is not None:
      oprot.writeFieldBegin('tradeVol', TType.I32, 9)
      oprot.writeI32(self.tradeVol)
      oprot.writeFieldEnd()
    if self.tradeTime is not None:
      oprot.writeFieldBegin('tradeTime', TType.STRING, 10)
      oprot.writeString(self.tradeTime)
      oprot.writeFieldEnd()
    if self.systemOrderID is not None:
      oprot.writeFieldBegin('systemOrderID', TType.STRING, 11)
      oprot.writeString(self.systemOrderID)
      oprot.writeFieldEnd()
    if self.tradeID is not None:
      oprot.writeFieldBegin('tradeID', TType.STRING, 12)
      oprot.writeString(self.tradeID)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 51)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.clientOrderID is None:
      raise TProtocol.TProtocolException(message='Required field clientOrderID is unset!')
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.exchangeID is None:
      raise TProtocol.TProtocolException(message='Required field exchangeID is unset!')
    if self.hedge is None:
      raise TProtocol.TProtocolException(message='Required field hedge is unset!')
    if self.offset is None:
      raise TProtocol.TProtocolException(message='Required field offset is unset!')
    if self.dire is None:
      raise TProtocol.TProtocolException(message='Required field dire is unset!')
    if self.tradePrice is None:
      raise TProtocol.TProtocolException(message='Required field tradePrice is unset!')
    if self.tradeVol is None:
      raise TProtocol.TProtocolException(message='Required field tradeVol is unset!')
    if self.tradeTime is None:
      raise TProtocol.TProtocolException(message='Required field tradeTime is unset!')
    if self.systemOrderID is None:
      raise TProtocol.TProtocolException(message='Required field systemOrderID is unset!')
    if self.tradeID is None:
      raise TProtocol.TProtocolException(message='Required field tradeID is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.clientOrderID)
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.exchangeID)
    value = (value * 31) ^ hash(self.hedge)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.dire)
    value = (value * 31) ^ hash(self.tradePrice)
    value = (value * 31) ^ hash(self.tradeVol)
    value = (value * 31) ^ hash(self.tradeTime)
    value = (value * 31) ^ hash(self.systemOrderID)
    value = (value * 31) ^ hash(self.tradeID)
    value = (value * 31) ^ hash(self.errorID)
    value = (value * 31) ^ hash(self.errorMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QryStep:
  """
  Attributes:
   - startNum
   - range
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'startNum', None, -1, ), # 1
    (2, TType.I32, 'range', None, -1, ), # 2
  )

  def __init__(self, startNum=thrift_spec[1][4], range=thrift_spec[2][4],):
    self.startNum = startNum
    self.range = range

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.startNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.range = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QryStep')
    if self.startNum is not None:
      oprot.writeFieldBegin('startNum', TType.I32, 1)
      oprot.writeI32(self.startNum)
      oprot.writeFieldEnd()
    if self.range is not None:
      oprot.writeFieldBegin('range', TType.I32, 2)
      oprot.writeI32(self.range)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.startNum is None:
      raise TProtocol.TProtocolException(message='Required field startNum is unset!')
    if self.range is None:
      raise TProtocol.TProtocolException(message='Required field range is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startNum)
    value = (value * 31) ^ hash(self.range)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RtnTrades:
  """
  Attributes:
   - trades
   - count
   - errorID
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'trades', (TType.STRUCT,(RtnTrade, RtnTrade.thrift_spec)), None, ), # 1
    (2, TType.I32, 'count', None, -1, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
    (51, TType.STRING, 'errorMsg', None, "", ), # 51
  )

  def __init__(self, trades=None, count=thrift_spec[2][4], errorID=thrift_spec[50][4], errorMsg=thrift_spec[51][4],):
    self.trades = trades
    self.count = count
    self.errorID = errorID
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.trades = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = RtnTrade()
            _elem12.read(iprot)
            self.trades.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RtnTrades')
    if self.trades is not None:
      oprot.writeFieldBegin('trades', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.trades))
      for iter13 in self.trades:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 51)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.trades is None:
      raise TProtocol.TProtocolException(message='Required field trades is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.trades)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.errorID)
    value = (value * 31) ^ hash(self.errorMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeReq:
  """
  Attributes:
   - Type
   - instrumentID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Type', None, None, ), # 1
    (2, TType.STRING, 'instrumentID', None, "", ), # 2
  )

  def __init__(self, Type=None, instrumentID=thrift_spec[2][4],):
    self.Type = Type
    self.instrumentID = instrumentID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeReq')
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.I32, 1)
      oprot.writeI32(self.Type)
      oprot.writeFieldEnd()
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 2)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.Type is None:
      raise TProtocol.TProtocolException(message='Required field Type is unset!')
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Type)
    value = (value * 31) ^ hash(self.instrumentID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Feed:
  """
  Attributes:
   - Type
   - instrumentID
   - ExchangeID
   - lastTradePrice
   - LastTradeVol
   - UpperLml
   - LowLml
   - depth
   - bids
   - bidVols
   - ask
   - askVols
   - QuoteUpdateMillisec
   - ReceiveUpdateMillisec
   - strategyID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'Type', None, None, ), # 1
    (2, TType.STRING, 'instrumentID', None, "", ), # 2
    (3, TType.STRING, 'ExchangeID', None, "", ), # 3
    (4, TType.DOUBLE, 'lastTradePrice', None, -1, ), # 4
    (5, TType.I32, 'LastTradeVol', None, -1, ), # 5
    (6, TType.DOUBLE, 'UpperLml', None, -1, ), # 6
    (7, TType.DOUBLE, 'LowLml', None, -1, ), # 7
    (8, TType.I32, 'depth', None, -1, ), # 8
    (9, TType.LIST, 'bids', (TType.DOUBLE,None), None, ), # 9
    (10, TType.LIST, 'bidVols', (TType.I32,None), None, ), # 10
    (11, TType.LIST, 'ask', (TType.DOUBLE,None), None, ), # 11
    (12, TType.LIST, 'askVols', (TType.I32,None), None, ), # 12
    (13, TType.I64, 'QuoteUpdateMillisec', None, -1, ), # 13
    (14, TType.I64, 'ReceiveUpdateMillisec', None, -1, ), # 14
    (15, TType.STRING, 'strategyID', None, "", ), # 15
  )

  def __init__(self, Type=None, instrumentID=thrift_spec[2][4], ExchangeID=thrift_spec[3][4], lastTradePrice=thrift_spec[4][4], LastTradeVol=thrift_spec[5][4], UpperLml=thrift_spec[6][4], LowLml=thrift_spec[7][4], depth=thrift_spec[8][4], bids=None, bidVols=None, ask=None, askVols=None, QuoteUpdateMillisec=thrift_spec[13][4], ReceiveUpdateMillisec=thrift_spec[14][4], strategyID=thrift_spec[15][4],):
    self.Type = Type
    self.instrumentID = instrumentID
    self.ExchangeID = ExchangeID
    self.lastTradePrice = lastTradePrice
    self.LastTradeVol = LastTradeVol
    self.UpperLml = UpperLml
    self.LowLml = LowLml
    self.depth = depth
    self.bids = bids
    self.bidVols = bidVols
    self.ask = ask
    self.askVols = askVols
    self.QuoteUpdateMillisec = QuoteUpdateMillisec
    self.ReceiveUpdateMillisec = ReceiveUpdateMillisec
    self.strategyID = strategyID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.Type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ExchangeID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.lastTradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.LastTradeVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.UpperLml = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.LowLml = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.depth = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.bids = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readDouble();
            self.bids.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.bidVols = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI32();
            self.bidVols.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.ask = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = iprot.readDouble();
            self.ask.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.askVols = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI32();
            self.askVols.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.QuoteUpdateMillisec = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.ReceiveUpdateMillisec = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.strategyID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Feed')
    if self.Type is not None:
      oprot.writeFieldBegin('Type', TType.I32, 1)
      oprot.writeI32(self.Type)
      oprot.writeFieldEnd()
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 2)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.ExchangeID is not None:
      oprot.writeFieldBegin('ExchangeID', TType.STRING, 3)
      oprot.writeString(self.ExchangeID)
      oprot.writeFieldEnd()
    if self.lastTradePrice is not None:
      oprot.writeFieldBegin('lastTradePrice', TType.DOUBLE, 4)
      oprot.writeDouble(self.lastTradePrice)
      oprot.writeFieldEnd()
    if self.LastTradeVol is not None:
      oprot.writeFieldBegin('LastTradeVol', TType.I32, 5)
      oprot.writeI32(self.LastTradeVol)
      oprot.writeFieldEnd()
    if self.UpperLml is not None:
      oprot.writeFieldBegin('UpperLml', TType.DOUBLE, 6)
      oprot.writeDouble(self.UpperLml)
      oprot.writeFieldEnd()
    if self.LowLml is not None:
      oprot.writeFieldBegin('LowLml', TType.DOUBLE, 7)
      oprot.writeDouble(self.LowLml)
      oprot.writeFieldEnd()
    if self.depth is not None:
      oprot.writeFieldBegin('depth', TType.I32, 8)
      oprot.writeI32(self.depth)
      oprot.writeFieldEnd()
    if self.bids is not None:
      oprot.writeFieldBegin('bids', TType.LIST, 9)
      oprot.writeListBegin(TType.DOUBLE, len(self.bids))
      for iter38 in self.bids:
        oprot.writeDouble(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bidVols is not None:
      oprot.writeFieldBegin('bidVols', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.bidVols))
      for iter39 in self.bidVols:
        oprot.writeI32(iter39)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ask is not None:
      oprot.writeFieldBegin('ask', TType.LIST, 11)
      oprot.writeListBegin(TType.DOUBLE, len(self.ask))
      for iter40 in self.ask:
        oprot.writeDouble(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.askVols is not None:
      oprot.writeFieldBegin('askVols', TType.LIST, 12)
      oprot.writeListBegin(TType.I32, len(self.askVols))
      for iter41 in self.askVols:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.QuoteUpdateMillisec is not None:
      oprot.writeFieldBegin('QuoteUpdateMillisec', TType.I64, 13)
      oprot.writeI64(self.QuoteUpdateMillisec)
      oprot.writeFieldEnd()
    if self.ReceiveUpdateMillisec is not None:
      oprot.writeFieldBegin('ReceiveUpdateMillisec', TType.I64, 14)
      oprot.writeI64(self.ReceiveUpdateMillisec)
      oprot.writeFieldEnd()
    if self.strategyID is not None:
      oprot.writeFieldBegin('strategyID', TType.STRING, 15)
      oprot.writeString(self.strategyID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.Type is None:
      raise TProtocol.TProtocolException(message='Required field Type is unset!')
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.ExchangeID is None:
      raise TProtocol.TProtocolException(message='Required field ExchangeID is unset!')
    if self.lastTradePrice is None:
      raise TProtocol.TProtocolException(message='Required field lastTradePrice is unset!')
    if self.LastTradeVol is None:
      raise TProtocol.TProtocolException(message='Required field LastTradeVol is unset!')
    if self.UpperLml is None:
      raise TProtocol.TProtocolException(message='Required field UpperLml is unset!')
    if self.LowLml is None:
      raise TProtocol.TProtocolException(message='Required field LowLml is unset!')
    if self.depth is None:
      raise TProtocol.TProtocolException(message='Required field depth is unset!')
    if self.bids is None:
      raise TProtocol.TProtocolException(message='Required field bids is unset!')
    if self.bidVols is None:
      raise TProtocol.TProtocolException(message='Required field bidVols is unset!')
    if self.ask is None:
      raise TProtocol.TProtocolException(message='Required field ask is unset!')
    if self.askVols is None:
      raise TProtocol.TProtocolException(message='Required field askVols is unset!')
    if self.QuoteUpdateMillisec is None:
      raise TProtocol.TProtocolException(message='Required field QuoteUpdateMillisec is unset!')
    if self.ReceiveUpdateMillisec is None:
      raise TProtocol.TProtocolException(message='Required field ReceiveUpdateMillisec is unset!')
    if self.strategyID is None:
      raise TProtocol.TProtocolException(message='Required field strategyID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.Type)
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.ExchangeID)
    value = (value * 31) ^ hash(self.lastTradePrice)
    value = (value * 31) ^ hash(self.LastTradeVol)
    value = (value * 31) ^ hash(self.UpperLml)
    value = (value * 31) ^ hash(self.LowLml)
    value = (value * 31) ^ hash(self.depth)
    value = (value * 31) ^ hash(self.bids)
    value = (value * 31) ^ hash(self.bidVols)
    value = (value * 31) ^ hash(self.ask)
    value = (value * 31) ^ hash(self.askVols)
    value = (value * 31) ^ hash(self.QuoteUpdateMillisec)
    value = (value * 31) ^ hash(self.ReceiveUpdateMillisec)
    value = (value * 31) ^ hash(self.strategyID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RtnFeeds:
  """
  Attributes:
   - feeds
   - count
   - errorID
   - errorMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'feeds', (TType.STRUCT,(Feed, Feed.thrift_spec)), None, ), # 1
    (2, TType.I32, 'count', None, -1, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'errorID', None, -1, ), # 50
    (51, TType.STRING, 'errorMsg', None, "", ), # 51
  )

  def __init__(self, feeds=None, count=thrift_spec[2][4], errorID=thrift_spec[50][4], errorMsg=thrift_spec[51][4],):
    self.feeds = feeds
    self.count = count
    self.errorID = errorID
    self.errorMsg = errorMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.feeds = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = Feed()
            _elem47.read(iprot)
            self.feeds.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.errorID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.STRING:
          self.errorMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RtnFeeds')
    if self.feeds is not None:
      oprot.writeFieldBegin('feeds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.feeds))
      for iter48 in self.feeds:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.errorID is not None:
      oprot.writeFieldBegin('errorID', TType.I32, 50)
      oprot.writeI32(self.errorID)
      oprot.writeFieldEnd()
    if self.errorMsg is not None:
      oprot.writeFieldBegin('errorMsg', TType.STRING, 51)
      oprot.writeString(self.errorMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.feeds is None:
      raise TProtocol.TProtocolException(message='Required field feeds is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    if self.errorID is None:
      raise TProtocol.TProtocolException(message='Required field errorID is unset!')
    if self.errorMsg is None:
      raise TProtocol.TProtocolException(message='Required field errorMsg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.feeds)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.errorID)
    value = (value * 31) ^ hash(self.errorMsg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Notification:
  """
  Attributes:
   - stratID
   - msgType
   - msg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stratID', None, "", ), # 1
    (2, TType.I32, 'msgType', None, None, ), # 2
    (3, TType.STRING, 'msg', None, "", ), # 3
  )

  def __init__(self, stratID=thrift_spec[1][4], msgType=None, msg=thrift_spec[3][4],):
    self.stratID = stratID
    self.msgType = msgType
    self.msg = msg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.msgType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.msg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Notification')
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 1)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.msgType is not None:
      oprot.writeFieldBegin('msgType', TType.I32, 2)
      oprot.writeI32(self.msgType)
      oprot.writeFieldEnd()
    if self.msg is not None:
      oprot.writeFieldBegin('msg', TType.STRING, 3)
      oprot.writeString(self.msg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.msgType is None:
      raise TProtocol.TProtocolException(message='Required field msgType is unset!')
    if self.msg is None:
      raise TProtocol.TProtocolException(message='Required field msg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.msgType)
    value = (value * 31) ^ hash(self.msg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RspPullMsg:
  """
  Attributes:
   - notifications
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'notifications', (TType.STRUCT,(Notification, Notification.thrift_spec)), None, ), # 1
    (2, TType.I32, 'count', None, -1, ), # 2
  )

  def __init__(self, notifications=None, count=thrift_spec[2][4],):
    self.notifications = notifications
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.notifications = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = Notification()
            _elem54.read(iprot)
            self.notifications.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RspPullMsg')
    if self.notifications is not None:
      oprot.writeFieldBegin('notifications', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.notifications))
      for iter55 in self.notifications:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.notifications is None:
      raise TProtocol.TProtocolException(message='Required field notifications is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.notifications)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Param:
  """
  Attributes:
   - name
   - val
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, "", ), # 1
    (2, TType.STRING, 'val', None, "", ), # 2
  )

  def __init__(self, name=thrift_spec[1][4], val=thrift_spec[2][4],):
    self.name = name
    self.val = val

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.val = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Param')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.val is not None:
      oprot.writeFieldBegin('val', TType.STRING, 2)
      oprot.writeString(self.val)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.val is None:
      raise TProtocol.TProtocolException(message='Required field val is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.val)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Trigger:
  """
  Attributes:
   - stratID
   - slotNum
   - arg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'stratID', None, "", ), # 1
    (2, TType.I32, 'slotNum', None, -1, ), # 2
    (3, TType.STRING, 'arg', None, "", ), # 3
  )

  def __init__(self, stratID=thrift_spec[1][4], slotNum=thrift_spec[2][4], arg=thrift_spec[3][4],):
    self.stratID = stratID
    self.slotNum = slotNum
    self.arg = arg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.slotNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.arg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Trigger')
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 1)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.slotNum is not None:
      oprot.writeFieldBegin('slotNum', TType.I32, 2)
      oprot.writeI32(self.slotNum)
      oprot.writeFieldEnd()
    if self.arg is not None:
      oprot.writeFieldBegin('arg', TType.STRING, 3)
      oprot.writeString(self.arg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.slotNum is None:
      raise TProtocol.TProtocolException(message='Required field slotNum is unset!')
    if self.arg is None:
      raise TProtocol.TProtocolException(message='Required field arg is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.slotNum)
    value = (value * 31) ^ hash(self.arg)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Settings:
  """
  Attributes:
   - fields
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fields', (TType.STRUCT,(Param, Param.thrift_spec)), None, ), # 1
    (2, TType.I32, 'count', None, -1, ), # 2
  )

  def __init__(self, fields=None, count=thrift_spec[2][4],):
    self.fields = fields
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fields = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = Param()
            _elem61.read(iprot)
            self.fields.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Settings')
    if self.fields is not None:
      oprot.writeFieldBegin('fields', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.fields))
      for iter62 in self.fields:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.fields is None:
      raise TProtocol.TProtocolException(message='Required field fields is unset!')
    if self.count is None:
      raise TProtocol.TProtocolException(message='Required field count is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fields)
    value = (value * 31) ^ hash(self.count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Status:
  """
  Attributes:
   - status
   - stratID
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'stratID', None, "", ), # 2
  )

  def __init__(self, status=None, stratID=thrift_spec[2][4],):
    self.status = status
    self.stratID = stratID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Status')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 2)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.stratID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Position:
  """
  Attributes:
   - instrumentID
   - stratID
   - Long
   - Short
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instrumentID', None, "", ), # 1
    (2, TType.STRING, 'stratID', None, "", ), # 2
    (3, TType.I32, 'Long', None, -1, ), # 3
    (4, TType.I32, 'Short', None, -1, ), # 4
  )

  def __init__(self, instrumentID=thrift_spec[1][4], stratID=thrift_spec[2][4], Long=thrift_spec[3][4], Short=thrift_spec[4][4],):
    self.instrumentID = instrumentID
    self.stratID = stratID
    self.Long = Long
    self.Short = Short

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.Long = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.Short = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Position')
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 1)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 2)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.Long is not None:
      oprot.writeFieldBegin('Long', TType.I32, 3)
      oprot.writeI32(self.Long)
      oprot.writeFieldEnd()
    if self.Short is not None:
      oprot.writeFieldBegin('Short', TType.I32, 4)
      oprot.writeI32(self.Short)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.Long is None:
      raise TProtocol.TProtocolException(message='Required field Long is unset!')
    if self.Short is None:
      raise TProtocol.TProtocolException(message='Required field Short is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.Long)
    value = (value * 31) ^ hash(self.Short)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Pnl:
  """
  Attributes:
   - instrumentID
   - stratID
   - pnl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'instrumentID', None, "", ), # 1
    (2, TType.STRING, 'stratID', None, "", ), # 2
    (3, TType.DOUBLE, 'pnl', None, -1, ), # 3
  )

  def __init__(self, instrumentID=thrift_spec[1][4], stratID=thrift_spec[2][4], pnl=thrift_spec[3][4],):
    self.instrumentID = instrumentID
    self.stratID = stratID
    self.pnl = pnl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.instrumentID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.stratID = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.pnl = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Pnl')
    if self.instrumentID is not None:
      oprot.writeFieldBegin('instrumentID', TType.STRING, 1)
      oprot.writeString(self.instrumentID)
      oprot.writeFieldEnd()
    if self.stratID is not None:
      oprot.writeFieldBegin('stratID', TType.STRING, 2)
      oprot.writeString(self.stratID)
      oprot.writeFieldEnd()
    if self.pnl is not None:
      oprot.writeFieldBegin('pnl', TType.DOUBLE, 3)
      oprot.writeDouble(self.pnl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.instrumentID is None:
      raise TProtocol.TProtocolException(message='Required field instrumentID is unset!')
    if self.stratID is None:
      raise TProtocol.TProtocolException(message='Required field stratID is unset!')
    if self.pnl is None:
      raise TProtocol.TProtocolException(message='Required field pnl is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.instrumentID)
    value = (value * 31) ^ hash(self.stratID)
    value = (value * 31) ^ hash(self.pnl)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
