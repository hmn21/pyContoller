#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from nautilus.ControlService import MonitorService
from nautilus.ControlService.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  Response Ping(string src)')
  print('  Response QryPosition(Request req)')
  print('  RtnOrders QryOrders(Request req)')
  print('  RtnTrades QryTrades(Request req)')
  print('  RtnOrders QryAuditOrders(QryStep qryStep)')
  print('  RtnOrders PullOrders(Request req)')
  print('  RtnTrades PullTrades(Request req)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = MonitorService.Client(protocol)
transport.open()

if cmd == 'Ping':
  if len(args) != 1:
    print('Ping requires 1 args')
    sys.exit(1)
  pp.pprint(client.Ping(args[0],))

elif cmd == 'QryPosition':
  if len(args) != 1:
    print('QryPosition requires 1 args')
    sys.exit(1)
  pp.pprint(client.QryPosition(eval(args[0]),))

elif cmd == 'QryOrders':
  if len(args) != 1:
    print('QryOrders requires 1 args')
    sys.exit(1)
  pp.pprint(client.QryOrders(eval(args[0]),))

elif cmd == 'QryTrades':
  if len(args) != 1:
    print('QryTrades requires 1 args')
    sys.exit(1)
  pp.pprint(client.QryTrades(eval(args[0]),))

elif cmd == 'QryAuditOrders':
  if len(args) != 1:
    print('QryAuditOrders requires 1 args')
    sys.exit(1)
  pp.pprint(client.QryAuditOrders(eval(args[0]),))

elif cmd == 'PullOrders':
  if len(args) != 1:
    print('PullOrders requires 1 args')
    sys.exit(1)
  pp.pprint(client.PullOrders(eval(args[0]),))

elif cmd == 'PullTrades':
  if len(args) != 1:
    print('PullTrades requires 1 args')
    sys.exit(1)
  pp.pprint(client.PullTrades(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
